name: "Terraform"
description: "Run terraform against an S3 backend based environment"
inputs:
  backend-bucket:
    description: "The Terraform S3 backend bucket name"
    required: true
  backend-bucket-key:
    description: "The key of the terraform.tfstate in the backend-bucket"
    required: true
  backend-bucket-key:
    description: "The key of the terraform.tfstate in the backend-bucket"
    required: true
  backend-encryption:
    description: "Whether encryption is enabled for the backend bucket"
    required: true
    default: "true"
  backend-region:
    description: "The AWS region of the Terraform backend"
    required: true
  environment:
    description: "The AWS environment"
    required: true
  terraform-version:
    description: "The Terraform version to use (defaults to 0.13.4)"
    required: false
    default: 0.13.4
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive

    - name: Terraform Init
      id: init
      run: terraform init -input=false -backend-config="bucket=${{ inputs.backend-bucket }}" -backend-config="key=${{ inputs.backend-bucket-key }}" -backend-config="encrypt=${{ inputs.backend-encryption }}" -backend-config="region=${{ inputs.backend-region }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -lock=false -var 'environment=${{ inputs.environment }}' -var 'aws_region=${{ inputs.backend-region }}'
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    #   run: terraform apply -auto-approve
